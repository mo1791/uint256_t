/**
 * @file uint256_t.hpp
 * @author your name (you@domain.com)
 * @brief
 * @version 0.1
 * @date 2022-07-23
 * @copyright Copyright (c) 2022
 * @details  unsigned 256 bit integer type for C++
 */

#ifndef _UINT256_T_HXX
#define _UINT256_T_HXX



#include <uint128_t.hxx>

//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    class uint256_t;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    // Give uint256_t type traits
    namespace std
    {  // This is probably not a good idea
    //  ----------------------------------------------------------------------------
        template <> struct is_arithmetic<uint256_t> : std::true_type {};
    //  ----------------------------------------------------------------------------
        template <> struct is_integral<uint256_t>   : std::true_type {};
    //  ----------------------------------------------------------------------------
        template <> struct is_unsigned<uint256_t>   : std::true_type {};
    //  ----------------------------------------------------------------------------
    }  // namespace std
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


    class uint256_t
    {
    private:
        uint128_t m_upper, m_lower;

    public:
    //  ----------------------------------------------------------------------------
        // Constructors
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------
        uint256_t();
    //  ----------------------------------------------------------------------------
        uint256_t(const uint256_t &rhs);
    //  ----------------------------------------------------------------------------
        uint256_t(uint256_t &&rhs);
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        uint256_t(const T &rhs);
    //  ----------------------------------------------------------------------------
        template <std::integral S, std::integral T>
        uint256_t(const S &upper_rhs, const T &lower_rhs);
    //  ----------------------------------------------------------------------------
        template <std::integral R, std::integral S, std::integral T, std::integral U>
        uint256_t(const R &upper_lhs, const S &lower_lhs, const T &upper_rhs, const U &lower_rhs);
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------



        //  RHS input args only
    //  ----------------------------------------------------------------------------
        // Assignment Operator
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------
        uint256_t &operator=(const uint256_t &rhs);
    //  ----------------------------------------------------------------------------
        uint256_t &operator=(uint256_t &&rhs);        
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        uint256_t& operator=(const T &rhs);
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------



    //  ----------------------------------------------------------------------------
        // Typecast Operators
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------
        operator bool() const;
    //  ----------------------------------------------------------------------------
        operator uint8_t() const;
    //  ----------------------------------------------------------------------------
        operator uint16_t() const;
    //  ----------------------------------------------------------------------------
        operator uint32_t() const;
    //  ----------------------------------------------------------------------------
        operator uint64_t() const;
    //  ----------------------------------------------------------------------------
        operator uint128_t() const;
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------



    //  ----------------------------------------------------------------------------
        // Bitwise Operators
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------
        uint256_t operator&(const uint128_t &rhs) const;
    //  ---------------------------------------------------------------------------- 
        uint256_t operator&(const uint256_t &rhs) const;
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        uint256_t operator&(const T &rhs) const;
    //  ----------------------------------------------------------------------------
        uint256_t &operator&=(const uint128_t &rhs);
    //  ----------------------------------------------------------------------------
        uint256_t &operator&=(const uint256_t &rhs);
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        uint256_t &operator&=(const T &rhs);
    //  ----------------------------------------------------------------------------
        uint256_t operator|(const uint128_t &rhs) const;
    //  ----------------------------------------------------------------------------
        uint256_t operator|(const uint256_t &rhs) const;
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        uint256_t operator|(const T &rhs) const;
    //  ----------------------------------------------------------------------------
        uint256_t &operator|=(const uint128_t &rhs);
    //  ----------------------------------------------------------------------------
        uint256_t &operator|=(const uint256_t &rhs);
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        uint256_t &operator|=(const T &rhs);
    //  ----------------------------------------------------------------------------
        uint256_t operator^(const uint128_t &rhs) const;
    //  ----------------------------------------------------------------------------
        uint256_t operator^(const uint256_t &rhs) const;
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        uint256_t operator^(const T &rhs) const;
    //  ----------------------------------------------------------------------------
        uint256_t &operator^=(const uint128_t &rhs);
    //  ----------------------------------------------------------------------------
        uint256_t &operator^=(const uint256_t &rhs);
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        uint256_t &operator^=(const T &rhs);
    //  ----------------------------------------------------------------------------
        uint256_t operator~() const;
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------



    //  ----------------------------------------------------------------------------
        // Bit Shift Operators
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------
        uint256_t operator<<(const uint128_t &shift) const;
    //  ----------------------------------------------------------------------------
        uint256_t operator<<(const uint256_t &shift) const;
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        uint256_t operator<<(const T &rhs) const;
    //  ----------------------------------------------------------------------------
        uint256_t &operator<<=(const uint128_t &shift);
    //  ----------------------------------------------------------------------------
        uint256_t &operator<<=(const uint256_t &shift);
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        uint256_t &operator<<=(const T &rhs);
    //  ----------------------------------------------------------------------------
        uint256_t operator>>(const uint128_t &shift) const;
    //  ----------------------------------------------------------------------------
        uint256_t operator>>(const uint256_t &shift) const;
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        uint256_t operator>>(const T &rhs) const;
    //  ----------------------------------------------------------------------------
        uint256_t &operator>>=(const uint128_t &shift);
    //  ----------------------------------------------------------------------------
        uint256_t &operator>>=(const uint256_t &shift);
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        uint256_t &operator>>=(const T &rhs);
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------



    //  ----------------------------------------------------------------------------
        // Logical Operators
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------
        bool operator!() const;
    //  ----------------------------------------------------------------------------
        bool operator&&(const uint128_t &rhs) const;
    //  ----------------------------------------------------------------------------
        bool operator&&(const uint256_t &rhs) const; 
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        bool operator&&(const T &rhs) const;
    //  ----------------------------------------------------------------------------
        bool operator||(const uint128_t &rhs) const;
    //  ----------------------------------------------------------------------------
        bool operator||(const uint256_t &rhs) const;
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        bool operator||(const T &rhs) const;
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------



    //  ----------------------------------------------------------------------------
        // Comparison Operators
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------
        bool operator==(const uint128_t &rhs) const;
    //  ----------------------------------------------------------------------------
        bool operator==(const uint256_t &rhs) const;
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        bool operator==(const T &rhs) const;
    //  ----------------------------------------------------------------------------
        bool operator!=(const uint128_t &rhs) const;
    //  ----------------------------------------------------------------------------
        bool operator!=(const uint256_t &rhs) const;
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        bool operator!=(const T &rhs) const;
    //  ----------------------------------------------------------------------------
        bool operator>(const uint128_t &rhs) const;
    //  ----------------------------------------------------------------------------
        bool operator>(const uint256_t &rhs) const;
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        bool operator>(const T &rhs) const;
    //  ----------------------------------------------------------------------------
        bool operator<(const uint128_t &rhs) const;
    //  ----------------------------------------------------------------------------
        bool operator<(const uint256_t &rhs) const;
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        bool operator<(const T &rhs) const;
    //  ----------------------------------------------------------------------------
        bool operator>=(const uint128_t &rhs) const;
    //  ----------------------------------------------------------------------------
        bool operator>=(const uint256_t &rhs) const;
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        bool operator>=(const T &rhs) const;
    //  ----------------------------------------------------------------------------
        bool operator<=(const uint128_t &rhs) const;
    //  ----------------------------------------------------------------------------
        bool operator<=(const uint256_t &rhs) const;
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        bool operator<=(const T &rhs) const;
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------



    //  ----------------------------------------------------------------------------
        // Arithmetic Operators
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------
        uint256_t operator+(const uint128_t &rhs) const;
    //  ----------------------------------------------------------------------------
        uint256_t operator+(const uint256_t &rhs) const;
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        uint256_t operator+(const T &rhs) const;
    //  ----------------------------------------------------------------------------
        uint256_t &operator+=(const uint128_t &rhs);
    //  ----------------------------------------------------------------------------
        uint256_t &operator+=(const uint256_t &rhs);
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        uint256_t &operator+=(const T &rhs);
    //  ----------------------------------------------------------------------------
        uint256_t operator-(const uint128_t &rhs) const;
    //  ----------------------------------------------------------------------------
        uint256_t operator-(const uint256_t &rhs) const;
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        uint256_t operator-(const T &rhs) const;
    //  ----------------------------------------------------------------------------
        uint256_t &operator-=(const uint128_t &rhs);
    //  ----------------------------------------------------------------------------
        uint256_t &operator-=(const uint256_t &rhs);
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        uint256_t &operator-=(const T &rhs);
    //  ----------------------------------------------------------------------------
        uint256_t operator*(const uint128_t &rhs) const;
    //  ----------------------------------------------------------------------------
        uint256_t operator*(const uint256_t &rhs) const;
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        uint256_t operator*(const T &rhs) const;
    //  ----------------------------------------------------------------------------
        uint256_t &operator*=(const uint128_t &rhs);
    //  ----------------------------------------------------------------------------
        uint256_t &operator*=(const uint256_t &rhs);
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        uint256_t &operator*=(const T &rhs);
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------


    private:
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------
        std::pair<uint256_t, uint256_t> divmod(const uint256_t &lhs,const uint256_t &rhs) const;
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------


    public:
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------
        uint256_t operator/(const uint128_t &rhs) const;
    //  ----------------------------------------------------------------------------
        uint256_t operator/(const uint256_t &rhs) const;
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        uint256_t operator/(const T &rhs) const;
    //  ----------------------------------------------------------------------------
        uint256_t &operator/=(const uint128_t &rhs);
    //  ----------------------------------------------------------------------------
        uint256_t &operator/=(const uint256_t &rhs);
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        uint256_t &operator/=(const T &rhs);
    //  ----------------------------------------------------------------------------
        uint256_t operator%(const uint128_t &rhs) const;
    //  ----------------------------------------------------------------------------
        uint256_t operator%(const uint256_t &rhs) const;
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        uint256_t operator%(const T &rhs) const;
    //  ----------------------------------------------------------------------------
        uint256_t &operator%=(const uint128_t &rhs);
    //  ----------------------------------------------------------------------------
        uint256_t &operator%=(const uint256_t &rhs);
    //  ----------------------------------------------------------------------------
        template <std::integral T>
        uint256_t &operator%=(const T &rhs);
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------



    //  ----------------------------------------------------------------------------
        // Increment Operators
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------
        uint256_t &operator++();
    //  ----------------------------------------------------------------------------
        uint256_t operator++(int);
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------


    //  ----------------------------------------------------------------------------
        // Decrement Operators
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------
        uint256_t &operator--();
    //  ----------------------------------------------------------------------------
        uint256_t operator--(int);
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------


    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------
        // Nothing done since promotion doesn't work here
        uint256_t operator+() const;
    //  ----------------------------------------------------------------------------
        // two's complement
        uint256_t operator-() const;
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------


    //  ----------------------------------------------------------------------------
        // Get private values
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------
        const uint128_t &upper() const;
    //  ----------------------------------------------------------------------------
        const uint128_t &lower() const;
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------



    //  ----------------------------------------------------------------------------
        // Get bitsize of value
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------
        uint16_t bits() const;
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------



    //  ----------------------------------------------------------------------------
        // Get string representation of value
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------
        std::string str(uint8_t base = 10, const unsigned int &len = 0) const;
    //  ----------------------------------------------------------------------------
    //  ----------------------------------------------------------------------------
    };


//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    extern const uint128_t uint128_64;
//  ----------------------------------------------------------------------------
    extern const uint128_t uint128_128;
//  ----------------------------------------------------------------------------
    extern const uint128_t uint128_256;
//  ----------------------------------------------------------------------------
    extern const uint256_t uint256_0;
//  ----------------------------------------------------------------------------
    extern const uint256_t uint256_1;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------




//  ----------------------------------------------------------------------------
    // Constructors
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t::uint256_t(const T &rhs)
        : m_upper(uint128_0)
        , m_lower(rhs)
    {}
//  ----------------------------------------------------------------------------
    template <std::integral S, std::integral T>
    uint256_t::uint256_t(const S &upper_rhs, const T &lower_rhs)
        : m_upper(upper_rhs)
        , m_lower(lower_rhs)
    {}
//  ----------------------------------------------------------------------------
    template <std::integral R, std::integral S, std::integral T, std::integral U>
    uint256_t::uint256_t(const R &upper_lhs, const S &lower_lhs, const T &upper_rhs, const U &lower_rhs)
        : m_upper(upper_lhs, lower_lhs)
        , m_lower(upper_rhs, lower_rhs)
    {}
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------




//  ----------------------------------------------------------------------------
    // Assignment operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t& uint256_t::operator=(const T &rhs)
    {
        m_upper = uint128_0;
        m_lower = rhs;

        return *this;
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Bitwise member operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t uint256_t::operator&(const T &rhs) const
    {
        return uint256_t(uint128_0, m_lower & (uint128_t)rhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t &uint256_t::operator&=(const T &rhs)
    {
        m_upper = uint128_0;
        m_lower &= rhs;
        
        return *this;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t uint256_t::operator|(const T &rhs) const
    {
        return uint256_t(m_upper, m_lower | uint128_t(rhs));
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t &uint256_t::operator|=(const T &rhs)
    {
        m_lower |= (uint128_t)rhs;
        
        return *this;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t uint256_t::operator^(const T &rhs) const
    {
        return uint256_t(m_upper, m_lower ^ (uint128_t)rhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t &uint256_t::operator^=(const T &rhs)
    {
        m_lower ^= (uint128_t)rhs;
        
        return *this;
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Bitwise Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint256_t operator&(const uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t operator&(const T &lhs, const uint256_t &rhs)
    {
        return rhs & lhs;
    }
//  ----------------------------------------------------------------------------
    uint128_t &operator&=(uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    T &operator&=(T &lhs, const uint256_t &rhs)
    {
        return lhs = static_cast<T>(rhs & lhs);
    }
//  ----------------------------------------------------------------------------
    uint256_t operator|(const uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t operator|(const T &lhs, const uint256_t &rhs)
    {
        return rhs | lhs;
    }
//  ----------------------------------------------------------------------------
    uint128_t &operator|=(uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    T &operator|=(T &lhs, const uint256_t &rhs)
    {
        return lhs = static_cast<T>(rhs | lhs);
    }
//  ----------------------------------------------------------------------------
    uint256_t operator^(const uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t operator^(const T &lhs, const uint256_t &rhs)
    {
        return rhs ^ lhs;
    }
//  ----------------------------------------------------------------------------
    uint128_t &operator^=(uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    T &operator^=(T &lhs, const uint256_t &rhs)
    {
        return lhs = static_cast<T>(rhs ^ lhs);
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Bit Shift member operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t uint256_t::operator<<(const T &rhs) const
    {
        return *this << uint256_t(rhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t &uint256_t::operator<<=(const T &rhs)
    {
        *this = *this << uint256_t(rhs);

        return *this;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t uint256_t::operator>>(const T &rhs) const
    {
        return *this >> uint256_t(rhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t &uint256_t::operator>>=(const T &rhs)
    {
        *this = *this >> uint256_t(rhs);
        
        return *this;
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Bitshift operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint256_t operator<<(const bool &lhs,       const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    uint256_t operator<<(const uint8_t &lhs,    const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    uint256_t operator<<(const uint16_t &lhs,   const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    uint256_t operator<<(const uint32_t &lhs,   const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    uint256_t operator<<(const uint64_t &lhs,   const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    uint256_t operator<<(const uint128_t &lhs,  const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    uint256_t operator<<(const int8_t &lhs,     const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    uint256_t operator<<(const int16_t &lhs,    const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    uint256_t operator<<(const int32_t &lhs,    const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    uint256_t operator<<(const int64_t &lhs,    const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    uint128_t &operator<<=(uint128_t &lhs,      const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    T &operator<<=(T &lhs, const uint256_t &rhs)
    {
        lhs = static_cast<T>(uint256_t(lhs) << rhs);

        return lhs;
    }
//  ----------------------------------------------------------------------------
    uint256_t operator>>(const bool &lhs,       const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    uint256_t operator>>(const uint8_t &lhs,    const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    uint256_t operator>>(const uint16_t &lhs,   const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    uint256_t operator>>(const uint32_t &lhs,   const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    uint256_t operator>>(const uint64_t &lhs,   const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    uint256_t operator>>(const uint128_t &lhs,  const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    uint256_t operator>>(const int8_t &lhs,     const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    uint256_t operator>>(const int16_t &lhs,    const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    uint256_t operator>>(const int32_t &lhs,    const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    uint256_t operator>>(const int64_t &lhs,    const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    uint128_t &operator>>=(uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    T &operator>>=(T &lhs, const uint256_t &rhs)
    {
        return lhs = static_cast<T>(uint256_t(lhs) >> rhs);
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------




//  ----------------------------------------------------------------------------
    // Comparison member Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool uint256_t::operator==(const T &rhs) const
    {
        return (not m_upper && (m_lower == uint128_t(rhs)));
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool uint256_t::operator!=(const T &rhs) const
    {
        return ((bool)m_upper | (m_lower != uint128_t(rhs)));
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool uint256_t::operator>(const T &rhs) const
    {
        return ((bool)m_upper | (m_lower > uint128_t(rhs)));
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool uint256_t::operator<(const T &rhs) const
    {
        return (not m_upper) ? (m_lower < uint128_t(rhs)) : false;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool uint256_t::operator>=(const T &rhs) const
    {
        return ((*this > rhs) | (*this == rhs));
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool uint256_t::operator<=(const T &rhs) const
    {
        return ((*this < rhs) | (*this == rhs));
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Comparison Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    bool operator==(const uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool operator==(const T &lhs, const uint256_t &rhs)
    {
        return (not rhs.upper() && ((uint64_t)lhs == rhs.lower()));
    }
//  ----------------------------------------------------------------------------
    bool operator!=(const uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool operator!=(const T &lhs, const uint256_t &rhs)
    {
        return (rhs.upper() | ((uint64_t)lhs != rhs.lower()));
    }
//  ----------------------------------------------------------------------------
    bool operator>(const uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool operator>(const T &lhs, const uint256_t &rhs)
    {
        return rhs.upper() ? false : ((uint128_t)lhs > rhs.lower());
    }
//  ----------------------------------------------------------------------------
    bool operator<(const uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool operator<(const T &lhs, const uint256_t &rhs)
    {
        return rhs.upper() ? true : ((uint128_t)lhs < rhs.lower());
    }
//  ----------------------------------------------------------------------------
    bool operator>=(const uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool operator>=(const T &lhs, const uint256_t &rhs)
    {
        return rhs.upper() ? false : ((uint128_t)lhs >= rhs.lower());
    }
//  ----------------------------------------------------------------------------
    bool operator<=(const uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool operator<=(const T &lhs, const uint256_t &rhs)
    {
        return rhs.upper() ? true : ((uint128_t)lhs <= rhs.lower());
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Arithmetic member Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t uint256_t::operator+(const T &rhs) const
    {
        return uint256_t(m_upper + ((m_lower + (uint128_t)rhs) < m_lower),
                        m_lower + (uint128_t)rhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t &uint256_t::operator+=(const T &rhs)
    {
        m_upper = m_upper + ((m_lower + rhs) < m_lower);
        m_lower = m_lower + rhs;
    
        return *this;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t uint256_t::operator-(const T &rhs) const
    {
        return uint256_t(m_upper - ((m_lower - rhs) > m_lower), m_lower - rhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t &uint256_t::operator-=(const T &rhs)
    {
        *this = *this - rhs;
    
        return *this;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t uint256_t::operator*(const T &rhs) const
    {
        return *this * uint256_t(rhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t &uint256_t::operator*=(const T &rhs)
    {
        *this = *this * uint256_t(rhs);

        return *this;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t uint256_t::operator/(const T &rhs) const
    {
        return *this / uint256_t(rhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t &uint256_t::operator/=(const T &rhs)
    {
        *this = *this / uint256_t(rhs);
    
        return *this;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t uint256_t::operator%(const T &rhs) const
    {
        return *this % uint256_t(rhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t &uint256_t::operator%=(const T &rhs)
    {
        *this = *this % uint256_t(rhs);
    
        return *this;
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Arithmetic Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint256_t operator+(const uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t operator+(const T &lhs, const uint256_t &rhs)
    {
        return rhs + lhs;
    }
//  ----------------------------------------------------------------------------
    uint128_t &operator+=(uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    T &operator+=(T &lhs, const uint256_t &rhs)
    {
        lhs = static_cast<T>(rhs + lhs);
        
        return lhs;
    }
//  ----------------------------------------------------------------------------
    uint256_t operator-(const uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t operator-(const T &lhs, const uint256_t &rhs)
    {
        return -(rhs - lhs);
    }
//  ----------------------------------------------------------------------------
    uint128_t &operator-=(uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    T &operator-=(T &lhs, const uint256_t &rhs)
    {
        return lhs = static_cast<T>(-(rhs - lhs));
    }
//  ----------------------------------------------------------------------------
    uint256_t operator*(const uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t operator*(const T &lhs, const uint256_t &rhs)
    {
        return rhs * lhs;
    }
//  ----------------------------------------------------------------------------
    uint128_t &operator*=(uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    T &operator*=(T &lhs, const uint256_t &rhs)
    {
        return lhs = static_cast<T>(rhs * lhs);
    }
//  ----------------------------------------------------------------------------
    uint256_t operator/(const uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t operator/(const T &lhs, const uint256_t &rhs)
    {
        return uint256_t(lhs) / rhs;
    }
//  ----------------------------------------------------------------------------
    uint128_t &operator/=(uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    T &operator/=(T &lhs, const uint256_t &rhs)
    {
        return lhs = static_cast<T>(uint256_t(lhs) / rhs);
    }
//  ----------------------------------------------------------------------------
    uint256_t operator%(const uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint256_t operator%(const T &lhs, const uint256_t &rhs)
    {
        return uint256_t(lhs) % rhs;
    }
//  ----------------------------------------------------------------------------
    uint128_t &operator%=(uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    T &operator%=(T &lhs, const uint256_t &rhs)
    {
        return lhs = static_cast<T>(uint256_t(lhs) % rhs);
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Logical member operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool uint256_t::operator&&(const T &rhs) const
    {
        return ((bool)*this && rhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool uint256_t::operator||(const T &rhs) const
    {
        return ((bool)*this || rhs);
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------




//  ----------------------------------------------------------------------------
    // IO Operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    std::ostream &operator<<(std::ostream &stream, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
#endif
