/******
** @file uint256_t.hpp
** @author your name (you@domain.com)
** @brief
** @version 0.1
** @date 2022-07-23
** @copyright Copyright (c) 2022
** @details  unsigned 256 bit integer type for C++
*************/

#ifndef _UINT256_T_HXX
#define _UINT256_T_HXX



#include <uint128_t.hxx>

//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    class uint256_t;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    // Give uint256_t type traits
    namespace std
    {  // This is probably not a good idea
    //  ----------------------------------------------------------------------------
        template <> struct is_arithmetic<uint256_t> : std::true_type {};
    //  ----------------------------------------------------------------------------
        template <> struct is_integral<uint256_t>   : std::true_type {};
    //  ----------------------------------------------------------------------------
        template <> struct is_unsigned<uint256_t>   : std::true_type {};
    //  ----------------------------------------------------------------------------
    }  // namespace std
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


class uint256_t
{
private:
    uint128_t m_upper, m_lower;

public:
//  ----------------------------------------------------------------------------
    // Constructors
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint256_t() noexcept;
//  ----------------------------------------------------------------------------
    uint256_t(const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t(uint256_t &&rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t(const std::integral auto &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t(const std::integral auto &upper_rhs,
              const std::integral auto &lower_rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t(const std::integral auto &upper_lhs,
              const std::integral auto &lower_lhs,
              const std::integral auto &upper_rhs,
              const std::integral auto &lower_rhs) noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



    //  RHS input args only
//  ----------------------------------------------------------------------------
    // Assignment Operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint256_t &operator=(const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t &operator=(uint256_t &&rhs) noexcept;        
//  ----------------------------------------------------------------------------
    uint256_t& operator=(const std::integral auto &rhs) noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Typecast Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    operator bool() const noexcept;
//  ----------------------------------------------------------------------------
    operator uint8_t() const noexcept;
//  ----------------------------------------------------------------------------
    operator uint16_t() const noexcept;
//  ----------------------------------------------------------------------------
    operator uint32_t() const noexcept;
//  ----------------------------------------------------------------------------
    operator uint64_t() const noexcept;
//  ----------------------------------------------------------------------------
    operator uint128_t() const noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Bitwise Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint256_t operator&(const uint128_t &rhs) const noexcept;
//  ---------------------------------------------------------------------------- 
    uint256_t operator&(const uint256_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator&(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint256_t &operator&=(const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t &operator&=(const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t &operator&=(const std::integral auto &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator|(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator|(const uint256_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator|(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint256_t &operator|=(const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t &operator|=(const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t &operator|=(const std::integral auto &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator^(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator^(const uint256_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator^(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint256_t &operator^=(const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t &operator^=(const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t &operator^=(const std::integral auto &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator~() const noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Bit Shift Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint256_t operator<<(const uint128_t &shift) const noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator<<(const uint256_t &shift) const noexcept;
//  ----------------------------------------------------------------------------
    
    uint256_t operator<<(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint256_t &operator<<=(const uint128_t &shift) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t &operator<<=(const uint256_t &shift) noexcept;
//  ----------------------------------------------------------------------------
    
    uint256_t &operator<<=(const std::integral auto &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator>>(const uint128_t &shift) const noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator>>(const uint256_t &shift) const noexcept;
//  ----------------------------------------------------------------------------
    
    uint256_t operator>>(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint256_t &operator>>=(const uint128_t &shift) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t &operator>>=(const uint256_t &shift) noexcept;
//  ----------------------------------------------------------------------------
    
    uint256_t &operator>>=(const std::integral auto &rhs) noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Logical Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    bool operator!() const noexcept;
//  ----------------------------------------------------------------------------
    bool operator&&(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator&&(const uint256_t &rhs) const noexcept;  
//  ----------------------------------------------------------------------------
    
    bool operator&&(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator||(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator||(const uint256_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    
    bool operator||(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Comparison Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    bool operator==(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator==(const uint256_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    
    bool operator==(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator!=(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator!=(const uint256_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    
    bool operator!=(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator>(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator>(const uint256_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    
    bool operator>(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator<(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator<(const uint256_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    
    bool operator<(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator>=(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator>=(const uint256_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    
    bool operator>=(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator<=(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator<=(const uint256_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    
    bool operator<=(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Arithmetic Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint256_t operator+(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator+(const uint256_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    
    uint256_t operator+(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint256_t &operator+=(const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t &operator+=(const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    
    uint256_t &operator+=(const std::integral auto &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator-(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator-(const uint256_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    
    uint256_t operator-(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint256_t &operator-=(const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t &operator-=(const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    
    uint256_t &operator-=(const std::integral auto &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator*(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator*(const uint256_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    
    uint256_t operator*(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint256_t &operator*=(const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t &operator*=(const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    
    uint256_t &operator*=(const std::integral auto &rhs) noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


private:
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    std::pair<uint256_t, uint256_t> divmod(const uint256_t &lhs,const uint256_t &rhs) const;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


public:
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint256_t operator/(const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
    uint256_t operator/(const uint256_t &rhs) const;
//  ----------------------------------------------------------------------------
    
    uint256_t operator/(const std::integral auto &rhs) const;
//  ----------------------------------------------------------------------------
    uint256_t &operator/=(const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    uint256_t &operator/=(const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    
    uint256_t &operator/=(const std::integral auto &rhs);
//  ----------------------------------------------------------------------------
    uint256_t operator%(const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
    uint256_t operator%(const uint256_t &rhs) const;
//  ----------------------------------------------------------------------------
    
    uint256_t operator%(const std::integral auto &rhs) const;
//  ----------------------------------------------------------------------------
    uint256_t &operator%=(const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    uint256_t &operator%=(const uint256_t &rhs);
//  ----------------------------------------------------------------------------
    
    uint256_t &operator%=(const std::integral auto &rhs);
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Increment Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint256_t &operator++() noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator++(int) noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Decrement Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint256_t &operator--() noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator--(int) noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint256_t operator+() const noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator-() const noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Get private values
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    const uint128_t &upper() const noexcept;
//  ----------------------------------------------------------------------------
    const uint128_t &lower() const noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Get bitsize of value
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint16_t bits() const noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Get string representation of value
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    std::string str(uint8_t base = 10, const unsigned int &len = 0) const;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
};


//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    extern const uint128_t uint128_64;
//  ----------------------------------------------------------------------------
    extern const uint128_t uint128_128;
//  ----------------------------------------------------------------------------
    extern const uint128_t uint128_256;
//  ----------------------------------------------------------------------------
    extern const uint256_t uint256_0;
//  ----------------------------------------------------------------------------
    extern const uint256_t uint256_1;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------




//  ----------------------------------------------------------------------------
    // Constructors
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

    uint256_t::uint256_t(const std::integral auto &rhs) noexcept
        : m_upper(uint128_0)
        , m_lower(rhs)
    {}
//  ----------------------------------------------------------------------------
    uint256_t::uint256_t(const std::integral auto &upper_rhs,
                         const std::integral auto &lower_rhs) noexcept
        : m_upper(upper_rhs)
        , m_lower(lower_rhs)
    {}
//  ----------------------------------------------------------------------------
    uint256_t::uint256_t(const std::integral auto &upper_lhs,
                         const std::integral auto &lower_lhs,
                         const std::integral auto &upper_rhs,
                         const std::integral auto &lower_rhs) noexcept
        : m_upper(upper_lhs, lower_lhs)
        , m_lower(upper_rhs, lower_rhs)
    {}
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------




//  ----------------------------------------------------------------------------
    // Assignment operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

    uint256_t& uint256_t::operator=(const std::integral auto &rhs) noexcept
    {
        m_upper = uint128_0;
        m_lower = rhs;

        return *this;
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Bitwise member operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

    uint256_t uint256_t::operator&(const std::integral auto &rhs) const noexcept
    {
        return uint256_t(uint128_0, m_lower & (uint128_t)rhs);
    }
//  ----------------------------------------------------------------------------

    uint256_t &uint256_t::operator&=(const std::integral auto &rhs) noexcept
    {
        m_upper = uint128_0;
        m_lower &= rhs;
        
        return *this;
    }
//  ----------------------------------------------------------------------------

    uint256_t uint256_t::operator|(const std::integral auto &rhs) const noexcept
    {
        return uint256_t(m_upper, m_lower | uint128_t(rhs));
    }
//  ----------------------------------------------------------------------------

    uint256_t &uint256_t::operator|=(const std::integral auto &rhs) noexcept
    {
        m_lower |= (uint128_t)rhs;
        
        return *this;
    }
//  ----------------------------------------------------------------------------

    uint256_t uint256_t::operator^(const std::integral auto &rhs) const noexcept
    {
        return uint256_t(m_upper, m_lower ^ (uint128_t)rhs);
    }
//  ----------------------------------------------------------------------------

    uint256_t &uint256_t::operator^=(const std::integral auto &rhs) noexcept
    {
        m_lower ^= (uint128_t)rhs;
        
        return *this;
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Bitwise Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint256_t operator&(const uint128_t &lhs, const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------

    uint256_t operator&(const std::integral auto &lhs, const uint256_t &rhs) noexcept
    {
        return rhs & lhs;
    }
//  ----------------------------------------------------------------------------
    uint128_t &operator&=(uint128_t &lhs, const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------

    auto &operator&=(std::integral auto &lhs, const uint256_t &rhs) noexcept
    {
        using Type = typename std::decay<decltype(lhs)>::type;
        return lhs = static_cast<Type>(rhs & lhs);
    }
//  ----------------------------------------------------------------------------
    uint256_t operator|(const uint128_t &lhs, const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------

    uint256_t operator|(const std::integral auto &lhs, const uint256_t &rhs) noexcept
    {
        return rhs | lhs;
    }
//  ----------------------------------------------------------------------------
    uint128_t &operator|=(uint128_t &lhs, const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------

    auto &operator|=(std::integral auto &lhs, const uint256_t &rhs) noexcept
    {
        using Type = typename std::decay<decltype(lhs)>::type;
        return lhs = static_cast<Type>(rhs | lhs);
    }
//  ----------------------------------------------------------------------------
    uint256_t operator^(const uint128_t &lhs, const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------

    uint256_t operator^(const std::integral auto &lhs, const uint256_t &rhs) noexcept
    {
        return rhs ^ lhs;
    }
//  ----------------------------------------------------------------------------
    uint128_t &operator^=(uint128_t &lhs, const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------

    auto &operator^=(std::integral auto &lhs, const uint256_t &rhs) noexcept
    {
        using Type = typename std::decay<decltype(lhs)>::type;
        return lhs = static_cast<Type>(rhs ^ lhs);
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Bit Shift member operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

    uint256_t uint256_t::operator<<(const std::integral auto &rhs) const noexcept
    {
        return *this << uint256_t(rhs);
    }
//  ----------------------------------------------------------------------------

    uint256_t &uint256_t::operator<<=(const std::integral auto &rhs) noexcept
    {
        *this = *this << uint256_t(rhs);

        return *this;
    }
//  ----------------------------------------------------------------------------

    uint256_t uint256_t::operator>>(const std::integral auto &rhs) const noexcept
    {
        return *this >> uint256_t(rhs);
    }
//  ----------------------------------------------------------------------------

    uint256_t &uint256_t::operator>>=(const std::integral auto &rhs) noexcept
    {
        *this = *this >> uint256_t(rhs);
        
        return *this;
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Bitshift operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint256_t operator<<(const bool &lhs,      const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator<<(const uint8_t &lhs,   const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator<<(const uint16_t &lhs,  const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator<<(const uint32_t &lhs,  const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator<<(const uint64_t &lhs,  const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator<<(const uint128_t &lhs, const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator<<(const int8_t &lhs,    const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator<<(const int16_t &lhs,   const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator<<(const int32_t &lhs,   const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator<<(const int64_t &lhs,   const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t &operator<<=(uint128_t &lhs,     const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------

    auto &operator<<=(std::integral auto &lhs, const uint256_t &rhs) noexcept
    {
        using Type = typename std::decay<decltype(lhs)>::type;
        return lhs = static_cast<Type>(uint256_t(lhs) << rhs);
    }
//  ----------------------------------------------------------------------------
    uint256_t operator>>(const bool &lhs,       const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator>>(const uint8_t &lhs,    const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator>>(const uint16_t &lhs,   const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator>>(const uint32_t &lhs,   const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator>>(const uint64_t &lhs,   const uint256_t &rhs) noexcept; 
//  ----------------------------------------------------------------------------
    uint256_t operator>>(const uint128_t &lhs,  const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator>>(const int8_t &lhs,     const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator>>(const int16_t &lhs,    const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator>>(const int32_t &lhs,    const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint256_t operator>>(const int64_t &lhs,    const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t &operator>>=(uint128_t &lhs, const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------

    auto &operator>>=(std::integral auto &lhs, const uint256_t &rhs) noexcept
    {
        using Type = typename std::decay<decltype(lhs)>::type;
        return lhs = static_cast<Type>(uint256_t(lhs) >> rhs);
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------




//  ----------------------------------------------------------------------------
    // Comparison member Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

    bool uint256_t::operator==(const std::integral auto &rhs) const noexcept
    {
        return (not m_upper && (m_lower == uint128_t(rhs)));
    }
//  ----------------------------------------------------------------------------

    bool uint256_t::operator!=(const std::integral auto &rhs) const noexcept
    {
        return ((bool)m_upper | (m_lower != uint128_t(rhs)));
    }
//  ----------------------------------------------------------------------------

    bool uint256_t::operator>(const std::integral auto &rhs) const noexcept
    {
        return ((bool)m_upper | (m_lower > uint128_t(rhs)));
    }
//  ----------------------------------------------------------------------------

    bool uint256_t::operator<(const std::integral auto &rhs) const noexcept
    {
        return (not m_upper) ? (m_lower < uint128_t(rhs)) : false;
    }
//  ----------------------------------------------------------------------------

    bool uint256_t::operator>=(const std::integral auto &rhs) const noexcept
    {
        return ((*this > rhs) | (*this == rhs));
    }
//  ----------------------------------------------------------------------------

    bool uint256_t::operator<=(const std::integral auto &rhs) const noexcept
    {
        return ((*this < rhs) | (*this == rhs));
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Comparison Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    bool operator==(const uint128_t &lhs, const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------

    bool operator==(const std::integral auto &lhs, const uint256_t &rhs) noexcept
    {
        return (not rhs.upper() && ((uint64_t)lhs == rhs.lower()));
    }
//  ----------------------------------------------------------------------------
    bool operator!=(const uint128_t &lhs, const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------

    bool operator!=(const std::integral auto &lhs, const uint256_t &rhs) noexcept
    {
        return (rhs.upper() | ((uint64_t)lhs != rhs.lower()));
    }
//  ----------------------------------------------------------------------------
    bool operator>(const uint128_t &lhs, const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------

    bool operator>(const std::integral auto &lhs, const uint256_t &rhs) noexcept
    {
        return rhs.upper() ? false : ((uint128_t)lhs > rhs.lower());
    }
//  ----------------------------------------------------------------------------
    bool operator<(const uint128_t &lhs, const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------

    bool operator<(const std::integral auto &lhs, const uint256_t &rhs) noexcept
    {
        return rhs.upper() ? true : ((uint128_t)lhs < rhs.lower());
    }
//  ----------------------------------------------------------------------------
    bool operator>=(const uint128_t &lhs, const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------

    bool operator>=(const std::integral auto &lhs, const uint256_t &rhs) noexcept
    {
        return rhs.upper() ? false : ((uint128_t)lhs >= rhs.lower());
    }
//  ----------------------------------------------------------------------------
    bool operator<=(const uint128_t &lhs, const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------

    bool operator<=(const std::integral auto &lhs, const uint256_t &rhs) noexcept
    {
        return rhs.upper() ? true : ((uint128_t)lhs <= rhs.lower());
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
// Arithmetic member Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

    uint256_t uint256_t::operator+(const std::integral auto &rhs) const noexcept
    {
        return uint256_t(m_upper + ((m_lower + (uint128_t)rhs) < m_lower),
                        m_lower + (uint128_t)rhs);
    }
//  ----------------------------------------------------------------------------

    uint256_t &uint256_t::operator+=(const std::integral auto &rhs) noexcept
    {
        m_upper = m_upper + ((m_lower + rhs) < m_lower);
        m_lower = m_lower + rhs;

        return *this;
    }
//  ----------------------------------------------------------------------------

    uint256_t uint256_t::operator-(const std::integral auto &rhs) const noexcept
    {
        return uint256_t(m_upper - ((m_lower - rhs) > m_lower), m_lower - rhs);
    }
//  ----------------------------------------------------------------------------

    uint256_t &uint256_t::operator-=(const std::integral auto &rhs) noexcept
    {
        *this = *this - rhs;

        return *this;
    }
//  ----------------------------------------------------------------------------

    uint256_t uint256_t::operator*(const std::integral auto &rhs) const noexcept
    {
        return *this * uint256_t(rhs);
    }
//  ----------------------------------------------------------------------------

    uint256_t &uint256_t::operator*=(const std::integral auto &rhs) noexcept
    {
        *this = *this * uint256_t(rhs);

        return *this;
    }
//  ----------------------------------------------------------------------------

    uint256_t uint256_t::operator/(const std::integral auto &rhs) const
    {
        return *this / uint256_t(rhs);
    }
//  ----------------------------------------------------------------------------

    uint256_t &uint256_t::operator/=(const std::integral auto &rhs)
    {
        *this = *this / uint256_t(rhs);

        return *this;
    }
//  ----------------------------------------------------------------------------

    uint256_t uint256_t::operator%(const std::integral auto &rhs) const
    {
        return *this % uint256_t(rhs);
    }
//  ----------------------------------------------------------------------------

    uint256_t &uint256_t::operator%=(const std::integral auto &rhs)
    {
        *this = *this % uint256_t(rhs);

        return *this;
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Arithmetic Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint256_t operator+(const uint128_t &lhs, const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------

    uint256_t operator+(const std::integral auto &lhs, const uint256_t &rhs) noexcept
    {
        return rhs + lhs;
    }
//  ----------------------------------------------------------------------------
    uint128_t &operator+=(uint128_t &lhs, const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------

    auto &operator+=(std::integral auto &lhs, const uint256_t &rhs) noexcept
    {
        using Type = typename std::decay<decltype(lhs)>::type;
        return lhs = static_cast<Type>(rhs + lhs);
    }
//  ----------------------------------------------------------------------------
    uint256_t operator-(const uint128_t &lhs, const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------

    uint256_t operator-(const std::integral auto &lhs, const uint256_t &rhs) noexcept
    {
        return -(rhs - lhs);
    }
//  ----------------------------------------------------------------------------
    uint128_t &operator-=(uint128_t &lhs, const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------

    auto &operator-=(std::integral auto &lhs, const uint256_t &rhs) noexcept
    {
        using Type = typename std::decay<decltype(lhs)>::type;
        return lhs = static_cast<Type>(-(rhs - lhs));
    }
//  ----------------------------------------------------------------------------
    uint256_t operator*(const uint128_t &lhs, const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------

    uint256_t operator*(const std::integral auto &lhs, const uint256_t &rhs) noexcept
    {
        return rhs * lhs;
    }
//  ----------------------------------------------------------------------------
    uint128_t &operator*=(uint128_t &lhs, const uint256_t &rhs) noexcept;
//  ----------------------------------------------------------------------------

    auto &operator*=(std::integral auto &lhs, const uint256_t &rhs) noexcept
    {
        using Type = typename std::decay<decltype(lhs)>::type;
        return lhs = static_cast<Type>(rhs * lhs);
    }
//  ----------------------------------------------------------------------------
    uint256_t operator/(const uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------

    uint256_t operator/(const std::integral auto &lhs, const uint256_t &rhs) 
    {
        return uint256_t(lhs) / rhs;
    }
//  ----------------------------------------------------------------------------
    uint128_t &operator/=(uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------

    auto &operator/=(std::integral auto &lhs, const uint256_t &rhs) 
    {
        using Type = typename std::decay<decltype(lhs)>::type;
        return lhs = static_cast<Type>(uint256_t(lhs) / rhs);
    }
//  ----------------------------------------------------------------------------
    uint256_t operator%(const uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------

    uint256_t operator%(const std::integral auto &lhs, const uint256_t &rhs) 
    {
        return uint256_t(lhs) % rhs;
    }
//  ----------------------------------------------------------------------------
    uint128_t &operator%=(uint128_t &lhs, const uint256_t &rhs);
//  ----------------------------------------------------------------------------

    auto &operator%=(std::integral auto &lhs, const uint256_t &rhs)
    {
        using Type = typename std::decay<decltype(lhs)>::type;
        return lhs = static_cast<Type>(uint256_t(lhs) % rhs);
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Logical member operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

    bool uint256_t::operator&&(const std::integral auto &rhs) const noexcept
    {
        return ((bool)*this && rhs);
    }
//  ----------------------------------------------------------------------------

    bool uint256_t::operator||(const std::integral auto &rhs) const noexcept
    { 
        return ((bool)*this || rhs);
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------




//  ----------------------------------------------------------------------------
    // IO Operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    std::ostream &operator<<(std::ostream &stream, const uint256_t &rhs);
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
#endif
