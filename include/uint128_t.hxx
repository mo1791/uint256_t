/*****
** @file uint128_t.hxx
** @author your name (you@domain.com)
** @version 0.1
** @date 2022-07-23
** @copyright Copyright (c) 2022
** @details An unsigned 128 bit integer type for C++
*********/

#ifndef _UINT128_T_HXX
#define _UINT128_T_HXX

#include <cstdint>
#include <ostream>
#include <stdexcept>
#include <string>
#include <type_traits>
#include <utility>
#include <concepts>

//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    class uint128_t;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

//  ----------------------------------------------------------------------------
// Give uint128_t type traits
namespace std
{ 
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    template <> struct is_arithmetic<uint128_t> : std::true_type {};
//  ----------------------------------------------------------------------------
    template <> struct is_integral<uint128_t>   : std::true_type {};
//  ----------------------------------------------------------------------------
    template <> struct is_unsigned<uint128_t>   : std::true_type {};
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
};  // namespace std
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
//  /** **/  //
class uint128_t
{
private:
    uint64_t m_upper, m_lower;

public:
//  ----------------------------------------------------------------------------
    // Constructors
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t() noexcept;
//  ----------------------------------------------------------------------------
    uint128_t(const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t(uint128_t &&rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t(const std::integral auto &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t(const std::integral auto &upper_rhs,
              const std::integral auto &lower_rhs) noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // RHS input args only
    // Assignment Operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t& operator=(const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t& operator=(uint128_t &&rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t& operator=(const std::integral auto &rhs) noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Typecast Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    operator bool()     const noexcept;
//  ----------------------------------------------------------------------------
    operator uint8_t()  const noexcept;
//  ----------------------------------------------------------------------------
    operator uint16_t() const noexcept;
//  ----------------------------------------------------------------------------
    operator uint32_t() const noexcept;
//  ----------------------------------------------------------------------------
    operator uint64_t() const noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Bitwise Operators
//  ----------------------------------------------------------------------------
    uint128_t operator&(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator&(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint128_t &operator&=(const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t &operator&=(const std::integral auto &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator|(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator|(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint128_t &operator|=(const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t &operator|=(const std::integral auto &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator^(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator^(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint128_t &operator^=(const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t &operator^=(const std::integral auto &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator~() const noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Bit Shift Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t operator<<(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator<<(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint128_t &operator<<=(const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t &operator<<=(const std::integral auto &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator>>(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator>>(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint128_t &operator>>=(const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t &operator>>=(const std::integral auto &rhs) noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Logical Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    bool operator!() const noexcept;
//  ----------------------------------------------------------------------------
    bool operator&&(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator||(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator&&(const std::integral auto &rhs) noexcept;
//  ----------------------------------------------------------------------------
    bool operator||(const std::integral auto &rhs) noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Comparison Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    bool operator==(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator==(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator!=(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator!=(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator>(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator>(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator<(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator<(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator>=(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator>=(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator<=(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    bool operator<=(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Arithmetic Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t operator+(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator+(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint128_t &operator+=(const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t &operator+=(const std::integral auto &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator-(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator-(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint128_t &operator-=(const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t &operator-=(const std::integral auto &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator*(const uint128_t &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator*(const std::integral auto &rhs) const noexcept;
//  ----------------------------------------------------------------------------
    uint128_t &operator*=(const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t &operator*=(const std::integral auto &rhs) noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



private:
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    std::pair<uint128_t, uint128_t> divmod(const uint128_t &lhs,
                                           const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

public:
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t operator/(const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
    uint128_t operator/(const std::integral auto &rhs) const;
//  ----------------------------------------------------------------------------
    uint128_t &operator/=(const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    uint128_t &operator/=(const std::integral auto &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator%(const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
    uint128_t operator%(const std::integral auto &rhs) const;
//  ----------------------------------------------------------------------------
    uint128_t &operator%=(const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    uint128_t &operator%=(const std::integral auto &rhs);
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Increment Operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t &operator++() noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator++(int) noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Decrement Operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t &operator--() noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator--(int) noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    // Nothing done since promotion doesn't work here
    uint128_t operator+() const noexcept;
//  ----------------------------------------------------------------------------
    // two's complement
    uint128_t operator-() const noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Get private values
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    const uint64_t &upper() const noexcept;
//  ----------------------------------------------------------------------------
    const uint64_t &lower() const noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Get bitsize of value
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint8_t bits() const noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

//  ----------------------------------------------------------------------------
    // Get string representation of value
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
   	std::string str(uint8_t base = 10U, const unsigned int &len = 0U) const;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

};

//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    // useful values
    extern const uint128_t uint128_0;
    extern const uint128_t uint128_1;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // constructors
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t::uint128_t(const std::integral auto &rhs) noexcept
        : m_upper(0)
        , m_lower(rhs)
    {}
//  ----------------------------------------------------------------------------
    uint128_t::uint128_t(const std::integral auto &up_rhs,
                         const std::integral auto &lo_rhs) noexcept
        : m_upper(up_rhs)
        , m_lower(lo_rhs)
    {}
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // assignments operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t& uint128_t::operator=(const std::integral auto &rhs) noexcept
    {
        this->m_upper = 0;
        this->m_lower = rhs;
        
        return *this;
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Bitwise member operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t uint128_t::operator&(const std::integral auto &rhs) const noexcept
    {
        return uint128_t(0, this->m_lower & (uint64_t)rhs);
    }
//  ----------------------------------------------------------------------------
    uint128_t& uint128_t::operator&=(const std::integral auto &rhs) noexcept
    {
        this->m_upper  = 0;
        this->m_lower &= rhs;

        return *this;
    }
//  ----------------------------------------------------------------------------
    uint128_t uint128_t::operator|(const std::integral auto &rhs) const noexcept
    {
        return uint128_t( this->m_upper, ( this->m_lower | (uint64_t)rhs ) );
    }
//  ----------------------------------------------------------------------------
    uint128_t& uint128_t::operator|=(const std::integral auto &rhs) noexcept
    {
        this->m_lower |= (uint64_t)rhs;

        return *this;
    }
//  ----------------------------------------------------------------------------
    uint128_t uint128_t::operator^(const std::integral auto &rhs) const noexcept
    {
        return uint128_t( this->m_upper, ( this->m_lower ^ (uint64_t)rhs ) );
    }
//  ----------------------------------------------------------------------------
    uint128_t& uint128_t::operator^=(const std::integral auto &rhs) noexcept
    {
        this->m_lower ^= (uint64_t)rhs;

        return *this;
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Bit shift member operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t uint128_t::operator<<(const std::integral auto &rhs) const noexcept
    {
        return *this << uint128_t(rhs);
    }
//  ----------------------------------------------------------------------------
    uint128_t& uint128_t::operator<<=(const std::integral auto &rhs) noexcept
    {
        *this = *this << uint128_t(rhs);

        return *this;
    }
//  ----------------------------------------------------------------------------
    uint128_t uint128_t::operator>>(const std::integral auto &rhs) const noexcept
    {
        return *this >> uint128_t(rhs);
    }
//  ----------------------------------------------------------------------------
    uint128_t& uint128_t::operator>>=(const std::integral auto &rhs) noexcept
    {
        *this = *this >> uint128_t(rhs);

        return *this;
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // LOgical member operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    bool uint128_t::operator&&(const std::integral auto &rhs) noexcept
    {
        return static_cast<bool>(*this && rhs);
    }
//  ----------------------------------------------------------------------------
    bool uint128_t::operator||(const std::integral auto &rhs) noexcept
    {
        return static_cast<bool>(*this || rhs);
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // comparaison member operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    bool uint128_t::operator==(const std::integral auto &rhs) const noexcept
    {
        return ( not this->m_upper && ( this->m_lower == (uint64_t)rhs ) );
    }
//  ----------------------------------------------------------------------------
    bool uint128_t::operator!=(const std::integral auto &rhs) const noexcept
    {
        return ( this->m_upper | ( this->m_lower != (uint64_t)rhs ) );
    }
//  ----------------------------------------------------------------------------
    bool uint128_t::operator>(const std::integral auto &rhs) const noexcept
    {
        return ( this->m_upper || ( this->m_lower > (uint64_t)rhs ) );
    }
//  ----------------------------------------------------------------------------
    bool uint128_t::operator<(const std::integral auto &rhs) const noexcept
    {
        return ( not this->m_upper ) ? ( this->m_lower < (uint64_t)rhs ) : false;
    }
//  ----------------------------------------------------------------------------
    bool uint128_t::operator>=(const std::integral auto &rhs) const noexcept
    {
        return ( ( *this > rhs ) | ( *this == rhs ) );
    }
//  ----------------------------------------------------------------------------
    bool uint128_t::operator<=(const std::integral auto &rhs) const noexcept
    {
        return ( ( *this < rhs ) | ( *this == rhs ) );
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // arithmetic member operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t uint128_t::operator+(const std::integral auto &rhs) const noexcept
    {
        return uint128_t( 
                    this->m_upper + ( ( this->m_lower + (uint64_t)rhs ) < this->m_lower ),
                    this->m_lower + (uint64_t)rhs );
    }
//  ----------------------------------------------------------------------------
    uint128_t& uint128_t::operator+=(const std::integral auto &rhs) noexcept
    {
        this->m_upper = this->m_upper + ( ( this->m_lower + rhs ) < this->m_lower );
        this->m_lower = this->m_lower + rhs;

        return *this;
    }
//  ----------------------------------------------------------------------------
    uint128_t uint128_t::operator-(const std::integral auto &rhs) const noexcept
    {
        return uint128_t(
                    (uint64_t)(this->m_upper - ((this->m_lower - rhs) > this->m_lower)),
                    (uint64_t)(this->m_lower - rhs));
    }
//  ----------------------------------------------------------------------------
    uint128_t& uint128_t::operator-=(const std::integral auto &rhs) noexcept
    {
        *this = *this - rhs;

        return *this;
    }
//  ----------------------------------------------------------------------------
    uint128_t uint128_t::operator*(const std::integral auto &rhs) const noexcept
    {
        return *this * uint128_t(rhs);
    }
//  ----------------------------------------------------------------------------
    uint128_t& uint128_t::operator*=(const std::integral auto &rhs) noexcept
    {
        *this = *this * uint128_t(rhs);

        return *this;
    }
//  ----------------------------------------------------------------------------
    uint128_t uint128_t::operator/(const std::integral auto &rhs) const
    {
        return *this / uint128_t(rhs);
    }
//  ----------------------------------------------------------------------------
    uint128_t& uint128_t::operator/=(const std::integral auto &rhs)
    {
        *this = *this / uint128_t(rhs);

        return *this;
    }
//  ----------------------------------------------------------------------------
    uint128_t uint128_t::operator%(const std::integral auto &rhs) const
    {
        return *this % uint128_t(rhs);
    }
//  ----------------------------------------------------------------------------
    uint128_t& uint128_t::operator%=(const std::integral auto &rhs)
    {
        *this = *this % uint128_t(rhs);

        return *this;
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------





//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    // lhs type T as first arguemnt
    // If the output is not a bool, casts to type T
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

//  ----------------------------------------------------------------------------
    // Bitwise Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t operator&(const std::integral auto &lhs, const uint128_t &rhs) noexcept
    {
        return rhs & lhs;
    }
//  ----------------------------------------------------------------------------
    auto &operator&=(std::integral auto &lhs, const uint128_t &rhs) noexcept
    {
        using Type = typename std::decay<decltype(lhs)>::type;
        return lhs = static_cast<Type>(rhs & lhs);
    }
//  ----------------------------------------------------------------------------
    uint128_t operator|(const std::integral auto &lhs, const uint128_t &rhs) noexcept
    {
        return rhs | lhs;
    }
//  ----------------------------------------------------------------------------
    auto &operator|=(std::integral auto &lhs, const uint128_t &rhs) noexcept
    {
        using Type = typename std::decay<decltype(lhs)>::type;
        return lhs = static_cast<Type>(rhs | lhs);
    }
//  ----------------------------------------------------------------------------
    uint128_t operator^(const std::integral auto &lhs, const uint128_t &rhs) noexcept
    {
        return rhs ^ lhs;
    }
//  ----------------------------------------------------------------------------
    auto &operator^=(std::integral auto &lhs, const uint128_t &rhs) noexcept
    {
        using Type = typename std::decay<decltype(lhs)>::type;
        return lhs = static_cast<Type>(rhs ^ lhs);
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Bitshift operators
//  ----------------------------------------------------------------------------
    uint128_t operator<<(const uint64_t &lhs, const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator<<(const uint32_t &lhs, const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator<<(const uint16_t &lhs, const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator<<(const uint8_t &lhs,  const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator<<(const int16_t &lhs,  const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator<<(const int32_t &lhs,  const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator<<(const int64_t &lhs,  const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator<<(const int8_t &lhs,   const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator<<(const bool &lhs,     const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    auto &operator<<=(std::integral auto &lhs, const uint128_t &rhs) noexcept
    {
        using Type = typename std::decay<decltype(lhs)>::type;
        return lhs = static_cast<Type>(uint128_t(lhs) << rhs);
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t operator>>(const uint16_t &lhs,  const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator>>(const uint32_t &lhs,  const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator>>(const uint64_t &lhs,  const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator>>(const int16_t &lhs,   const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator>>(const int32_t &lhs,   const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator>>(const int64_t &lhs,   const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator>>(const uint8_t &lhs,   const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator>>(const int8_t &lhs,    const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
    uint128_t operator>>(const bool &lhs,      const uint128_t &rhs) noexcept;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    auto &operator>>=(std::integral auto &lhs, const uint128_t &rhs) noexcept
    {
        using Type = typename std::decay<decltype(lhs)>::type;
        return lhs = static_cast<Type>(uint128_t(lhs) >> rhs);
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Comparison Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    bool operator==(const std::integral auto &lhs, const uint128_t &rhs) noexcept
    {
        return ( not rhs.upper() && ((uint64_t)lhs == rhs.lower()));
    }
//  ----------------------------------------------------------------------------
    bool operator!=(const std::integral auto &lhs, const uint128_t &rhs) noexcept
    {
        return (rhs.upper() | ((uint64_t)lhs != rhs.lower()));
    }
//  ----------------------------------------------------------------------------
    bool operator>(const std::integral auto &lhs, const uint128_t &rhs) noexcept
    {
        return (not rhs.upper()) && ((uint64_t)lhs > rhs.lower());
    }
//  ----------------------------------------------------------------------------
    bool operator<(const std::integral auto &lhs, const uint128_t &rhs) noexcept
    {
        if (rhs.upper())
        {
            return true;
        }
        return ((uint64_t)lhs < rhs.lower());
    }
//  ----------------------------------------------------------------------------
    bool operator>=(const std::integral auto &lhs, const uint128_t &rhs) noexcept
    {
        if (rhs.upper())
        {
            return false;
        }
        return ((uint64_t)lhs >= rhs.lower());
    }
//  ----------------------------------------------------------------------------
    bool operator<=(const std::integral auto &lhs, const uint128_t &rhs) noexcept
    {
        if (rhs.upper())
        {
            return true;
        }
        return ((uint64_t)lhs <= rhs.lower());
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Arithmetic Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t operator+(const std::integral auto &lhs, const uint128_t &rhs) noexcept
    {
        return rhs + lhs;
    }
//  ----------------------------------------------------------------------------
    auto &operator+=(std::integral auto &lhs, const uint128_t &rhs) noexcept
    {
        using Type = typename std::decay<decltype(lhs)>::type;
        return lhs = static_cast<Type>(rhs + lhs);
    }
//  ----------------------------------------------------------------------------
    uint128_t operator-(const std::integral auto &lhs, const uint128_t &rhs) noexcept
    {
        return -(rhs - lhs);
    }
//  ----------------------------------------------------------------------------
    auto &operator-=(std::integral auto &lhs, const uint128_t &rhs) noexcept
    {
        using Type = typename std::decay<decltype(lhs)>::type;
        return lhs = static_cast<Type>(-(rhs - lhs));
    }
//  ----------------------------------------------------------------------------
    uint128_t operator*(const std::integral auto &lhs, const uint128_t &rhs) noexcept
    {
        return rhs * lhs;
    }
//  ----------------------------------------------------------------------------
    auto &operator*=(std::integral auto &lhs, const uint128_t &rhs) noexcept
    {
        using Type = typename std::decay<decltype(lhs)>::type;
        return lhs = static_cast<Type>(rhs * lhs);
    }
//  ----------------------------------------------------------------------------
    uint128_t operator/(const std::integral auto &lhs, const uint128_t &rhs) 
    {
        return uint128_t(lhs) / rhs;
    }
//  ----------------------------------------------------------------------------
    auto &operator/=(std::integral auto &lhs, const uint128_t &rhs) 
    {
        using Type = typename std::decay<decltype(lhs)>::type;
        return lhs = static_cast<Type>(uint128_t(lhs) / rhs);
    }
//  ----------------------------------------------------------------------------
    uint128_t operator%(const std::integral auto &lhs, const uint128_t &rhs)
    {
        return uint128_t(lhs) % rhs;
    }
//  ----------------------------------------------------------------------------
    auto &operator%=(std::integral auto &lhs, const uint128_t &rhs)
    {
        using Type = std::decay<decltype(lhs)>::type;
        return lhs = static_cast<Type>(uint128_t(lhs) % rhs);
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // IO Operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    std::ostream &operator<<(std::ostream &stream, const uint128_t &rhs);
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
#endif
