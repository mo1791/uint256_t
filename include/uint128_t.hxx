/**
* @file uint128_t.hxx
* @author your name (you@domain.com)
* @version 0.1
* @date 2022-07-23
* @copyright Copyright (c) 2022
* @details An unsigned 128 bit integer type for C++

*/

#ifndef _UINT128_T_HXX
#define _UINT128_T_HXX

#include <cstdint>
#include <ostream>
#include <stdexcept>
#include <string>
#include <type_traits>
#include <utility>
#include <concepts>

//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    class uint128_t;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

//  ----------------------------------------------------------------------------
// Give uint128_t type traits
namespace std
{  // This is probably not a good idea
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    template <> struct is_arithmetic<uint128_t> : std::true_type {};
//  ----------------------------------------------------------------------------
    template <> struct is_integral<uint128_t>   : std::true_type {};
//  ----------------------------------------------------------------------------
    template <> struct is_unsigned<uint128_t>   : std::true_type {};
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
};  // namespace std
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
//  /** **/  //
class uint128_t
{
private:
    uint64_t m_upper, m_lower;

public:
//  ----------------------------------------------------------------------------
    // Constructors
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t();
//  ----------------------------------------------------------------------------
    uint128_t(const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    uint128_t(uint128_t &&rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t(const T &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral S, std::integral T>
    uint128_t(const S &upper_rhs, const T &lower_rhs);
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    //  RHS input args only
    // Assignment Operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t &operator=(const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    uint128_t &operator=(uint128_t &&rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t &operator=(const T &rhs);
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Typecast Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    operator bool() const;
//  ----------------------------------------------------------------------------
    operator uint8_t() const;
//  ----------------------------------------------------------------------------
    operator uint16_t() const;
//  ----------------------------------------------------------------------------
    operator uint32_t() const;
//  ----------------------------------------------------------------------------
    operator uint64_t() const;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Bitwise Operators
//  ----------------------------------------------------------------------------
    uint128_t operator&(const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t operator&(const T &rhs) const;
//  ----------------------------------------------------------------------------
    uint128_t &operator&=(const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t &operator&=(const T &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator|(const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t operator|(const T &rhs) const;
//  ----------------------------------------------------------------------------
    uint128_t &operator|=(const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t &operator|=(const T &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator^(const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t operator^(const T &rhs) const;
//  ----------------------------------------------------------------------------
    uint128_t &operator^=(const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t &operator^=(const T &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator~() const;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Bit Shift Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t operator<<(const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t operator<<(const T &rhs) const;
//  ----------------------------------------------------------------------------
    uint128_t &operator<<=(const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t &operator<<=(const T &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator>>(const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t operator>>(const T &rhs) const;
//  ----------------------------------------------------------------------------
    uint128_t &operator>>=(const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t &operator>>=(const T &rhs);
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Logical Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    bool operator!() const;
//  ----------------------------------------------------------------------------
    bool operator&&(const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
    bool operator||(const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool operator&&(const T &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool operator||(const T &rhs);
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Comparison Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    bool operator==(const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool operator==(const T &rhs) const;
//  ----------------------------------------------------------------------------
    bool operator!=(const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool operator!=(const T &rhs) const;
//  ----------------------------------------------------------------------------
    bool operator>(const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool operator>(const T &rhs) const;
//  ----------------------------------------------------------------------------
    bool operator<(const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool operator<(const T &rhs) const;
//  ----------------------------------------------------------------------------
    bool operator>=(const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool operator>=(const T &rhs) const;
//  ----------------------------------------------------------------------------
    bool operator<=(const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool operator<=(const T &rhs) const;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Arithmetic Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t operator+(const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t operator+(const T &rhs) const;
//  ----------------------------------------------------------------------------
    uint128_t &operator+=(const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t &operator+=(const T &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator-(const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t operator-(const T &rhs) const;
//  ----------------------------------------------------------------------------
    uint128_t &operator-=(const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t &operator-=(const T &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator*(const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t operator*(const T &rhs) const;
//  ----------------------------------------------------------------------------
    uint128_t &operator*=(const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t &operator*=(const T &rhs);
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



private:
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    std::pair<uint128_t, uint128_t> divmod(const uint128_t &lhs, const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

public:
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t operator/(const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t operator/(const T &rhs) const;
//  ----------------------------------------------------------------------------
    uint128_t &operator/=(const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t &operator/=(const T &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator%(const uint128_t &rhs) const;
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t operator%(const T &rhs) const;
//  ----------------------------------------------------------------------------
    uint128_t &operator%=(const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t &operator%=(const T &rhs);
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Increment Operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t &operator++();
//  ----------------------------------------------------------------------------
    uint128_t operator++(int);
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Decrement Operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t &operator--();
//  ----------------------------------------------------------------------------
    uint128_t operator--(int);
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    // Nothing done since promotion doesn't work here
    uint128_t operator+() const;
//  ----------------------------------------------------------------------------
    // two's complement
    uint128_t operator-() const;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Get private values
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    const uint64_t &upper() const;
//  ----------------------------------------------------------------------------
    const uint64_t &lower() const;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Get bitsize of value
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint8_t bits() const;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

//  ----------------------------------------------------------------------------
    // Get string representation of value
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
   	std::string str(uint8_t base = 10, const unsigned int &len = 0) const;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

};

//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    // useful values
    extern const uint128_t uint128_0;
    extern const uint128_t uint128_1;
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // constructors
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t::uint128_t(const T &rhs) 
        : m_upper(0)
        , m_lower(rhs)
    {}
//  ----------------------------------------------------------------------------
    template <std::integral S, std::integral T>
    uint128_t::uint128_t(const S &up_rhs, const T &lo_rhs)
        : m_upper(up_rhs)
        , m_lower(lo_rhs)
    {}
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // assignments operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t& uint128_t::operator=(const T &rhs)
    {
        m_upper = 0;
        m_lower = rhs;
        
        return *this;
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Bitwise member operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t uint128_t::operator&(const T &rhs) const
    {
        return uint128_t(0, m_lower & (uint64_t)rhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t& uint128_t::operator&=(const T &rhs)
    {
        m_upper  = 0;
        m_lower &= rhs;

        return *this;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t uint128_t::operator|(const T &rhs) const
    {
        return uint128_t( m_upper, ( m_lower | (uint64_t)rhs ) );
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t& uint128_t::operator|=(const T &rhs)
    {
        m_lower |= (uint64_t)rhs;

        return *this;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t uint128_t::operator^(const T &rhs) const
    {
        return uint128_t( m_upper, ( m_lower ^ (uint64_t)rhs ) );
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t& uint128_t::operator^=(const T &rhs)
    {
        m_lower ^= (uint64_t)rhs;

        return *this;
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // Bit shift member operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t uint128_t::operator<<(const T &rhs) const
    {
        return *this << uint128_t(rhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t& uint128_t::operator<<=(const T &rhs)
    {
        *this = *this << uint128_t(rhs);

        return *this;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t uint128_t::operator>>(const T &rhs) const
    {
        return *this >> uint128_t(rhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t& uint128_t::operator>>=(const T &rhs)
    {
        *this = *this >> uint128_t(rhs);

        return *this;
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // LOgical member operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool uint128_t::operator&&(const T &rhs)
    {
        return static_cast<bool>(*this && rhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool uint128_t::operator||(const T &rhs)
    {
        return static_cast<bool>(*this || rhs);
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // comparaison member operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool uint128_t::operator==(const T &rhs) const
    {
        return ( not m_upper && ( m_lower == (uint64_t)rhs ) );
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool uint128_t::operator!=(const T &rhs) const
    {
        return ( m_upper | ( m_lower != (uint64_t)rhs ) );
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool uint128_t::operator>(const T &rhs) const
    {
        return ( m_upper || ( m_lower > (uint64_t)rhs ) );
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool uint128_t::operator<(const T &rhs) const
    {
        return ( not m_upper ) ? ( m_lower < (uint64_t)rhs ) : false;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool uint128_t::operator>=(const T &rhs) const
    {
        return ( ( *this > rhs ) | ( *this == rhs ) );
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool uint128_t::operator<=(const T &rhs) const
    {
        return ( ( *this < rhs ) | ( *this == rhs ) );
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // arithmetic member operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t uint128_t::operator+(const T &rhs) const
    {
        return uint128_t( m_upper + ( ( m_lower + (uint64_t)rhs ) < m_lower ),
                         ( m_lower + (uint64_t)rhs ) );
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t& uint128_t::operator+=(const T &rhs)
    {
        m_upper = m_upper + ( ( m_lower + rhs ) < m_lower );
        m_lower = m_lower + rhs;

        return *this;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t uint128_t::operator-(const T &rhs) const
    {
        return uint128_t((uint64_t)(m_upper - ((m_lower - rhs) > m_lower)),
                         (uint64_t)(m_lower - rhs));
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t& uint128_t::operator-=(const T &rhs)
    {
        *this = *this - rhs;

        return *this;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t uint128_t::operator*(const T &rhs) const
    {
        return *this * uint128_t(rhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t& uint128_t::operator*=(const T &rhs)
    {
        *this = *this * uint128_t(rhs);

        return *this;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t uint128_t::operator/(const T &rhs) const
    {
        return *this / uint128_t(rhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t& uint128_t::operator/=(const T &rhs)
    {
        *this = *this / uint128_t(rhs);

        return *this;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t uint128_t::operator%(const T &rhs) const
    {
        return *this % uint128_t(rhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t& uint128_t::operator%=(const T &rhs)
    {
        *this = *this % uint128_t(rhs);

        return *this;
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------





//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    // lhs type T as first arguemnt
    // If the output is not a bool, casts to type T
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

//  ----------------------------------------------------------------------------
    // Bitwise Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t operator&(const T &lhs, const uint128_t &rhs)
    {
        return rhs & lhs;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    T &operator&=(T &lhs, const uint128_t &rhs)
    {
        return lhs = static_cast<T>(rhs & lhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t operator|(const T &lhs, const uint128_t &rhs)
    {
        return rhs | lhs;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    T &operator|=(T &lhs, const uint128_t &rhs)
    {
        return lhs = static_cast<T>(rhs | lhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t operator^(const T &lhs, const uint128_t &rhs)
    {
        return rhs ^ lhs;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    T &operator^=(T &lhs, const uint128_t &rhs)
    {
        return lhs = static_cast<T>(rhs ^ lhs);
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Bitshift operators
//  ----------------------------------------------------------------------------
    uint128_t operator<<(const uint64_t &lhs, const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator<<(const uint32_t &lhs, const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator<<(const uint16_t &lhs, const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator<<(const uint8_t &lhs,  const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator<<(const int16_t &lhs,  const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator<<(const int32_t &lhs,  const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator<<(const int64_t &lhs,  const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator<<(const int8_t &lhs,   const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator<<(const bool &lhs,     const uint128_t &rhs);
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    template <std::integral T>
    T &operator<<=(T &lhs, const uint128_t &rhs)
    {
        return lhs = static_cast<T>(uint128_t(lhs) << rhs);
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    uint128_t operator>>(const uint16_t &lhs,  const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator>>(const uint32_t &lhs,  const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator>>(const uint64_t &lhs,  const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator>>(const int16_t &lhs,   const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator>>(const int32_t &lhs,   const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator>>(const int64_t &lhs,   const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator>>(const uint8_t &lhs,   const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator>>(const int8_t &lhs,    const uint128_t &rhs);
//  ----------------------------------------------------------------------------
    uint128_t operator>>(const bool &lhs,      const uint128_t &rhs);
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------

//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    template <std::integral T>
    T &operator>>=(T &lhs, const uint128_t &rhs)
    {
        return lhs = static_cast<T>(uint128_t(lhs) >> rhs);
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Comparison Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool operator==(const T &lhs, const uint128_t &rhs)
    {
        return ( not rhs.upper() && ((uint64_t)lhs == rhs.lower()));
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool operator!=(const T &lhs, const uint128_t &rhs)
    {
        return (rhs.upper() | ((uint64_t)lhs != rhs.lower()));
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool operator>(const T &lhs, const uint128_t &rhs)
    {
        return (not rhs.upper()) && ((uint64_t)lhs > rhs.lower());
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool operator<(const T &lhs, const uint128_t &rhs)
    {
        if (rhs.upper())
        {
            return true;
        }
        return ((uint64_t)lhs < rhs.lower());
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool operator>=(const T &lhs, const uint128_t &rhs)
    {
        if (rhs.upper())
        {
            return false;
        }
        return ((uint64_t)lhs >= rhs.lower());
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    bool operator<=(const T &lhs, const uint128_t &rhs)
    {
        if (rhs.upper())
        {
            return true;
        }
        return ((uint64_t)lhs <= rhs.lower());
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------


//  ----------------------------------------------------------------------------
    // Arithmetic Operators
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t operator+(const T &lhs, const uint128_t &rhs)
    {
        return rhs + lhs;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    T &operator+=(T &lhs, const uint128_t &rhs)
    {
        return lhs = static_cast<T>(rhs + lhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t operator-(const T &lhs, const uint128_t &rhs)
    {
        return -(rhs - lhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    T &operator-=(T &lhs, const uint128_t &rhs)
    {
        return lhs = static_cast<T>(-(rhs - lhs));
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t operator*(const T &lhs, const uint128_t &rhs)
    {
        return rhs * lhs;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    T &operator*=(T &lhs, const uint128_t &rhs)
    {
        return lhs = static_cast<T>(rhs * lhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t operator/(const T &lhs, const uint128_t &rhs)
    {
        return uint128_t(lhs) / rhs;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    T &operator/=(T &lhs, const uint128_t &rhs)
    {
        return lhs = static_cast<T>(uint128_t(lhs) / rhs);
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    uint128_t operator%(const T &lhs, const uint128_t &rhs)
    {
        return uint128_t(lhs) % rhs;
    }
//  ----------------------------------------------------------------------------
    template <std::integral T>
    T &operator%=(T &lhs, const uint128_t &rhs)
    {
        return lhs = static_cast<T>(uint128_t(lhs) % rhs);
    }
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------



//  ----------------------------------------------------------------------------
    // IO Operator
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
    std::ostream &operator<<(std::ostream &stream, const uint128_t &rhs);
//  ----------------------------------------------------------------------------
//  ----------------------------------------------------------------------------
#endif
